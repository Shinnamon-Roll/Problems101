โปรแกรมมิ่งแบบไดนามิก (Dynamic Programming) คือเทคนิคการเขียนโปรแกรมที่มีประสิทธิภาพซึ่งใช้ในการแก้ปัญหาที่ซับซ้อนโดยการแบ่งปัญหาออกเป็นปัญหาย่อยที่ง่ายขึ้น เทคนิคนี้มีประสิทธิภาพโดยเฉพาะสำหรับปัญหาที่มีคุณสมบัติสองประการดังต่อไปนี้:

โครงสร้างที่เหมาะสม (Optimal Substructure): หมายความว่าโซลูชันที่ดีที่สุดของปัญหาสามารถสร้างขึ้นจากโซลูชันที่ดีที่สุดของปัญหาย่อย กล่าวคือ หากคุณทราบโซลูชันที่ดีที่สุดสำหรับตัวอย่างปัญหาขนาดเล็ก คุณสามารถใช้ข้อมูลนั้นเพื่อสร้างโซลูชันที่ดีที่สุดสำหรับปัญหาขนาดใหญ่

ปัญหาย่อยที่ทับซ้อนกัน (Overlapping Subproblems): หมายความว่าปัญหาสามารถแบ่งออกเป็นปัญหาย่อยที่เล็กกว่าซึ่งถูกใช้งานซ้ำหลายครั้ง แทนที่จะต้องแก้ปัญหาย่อยซ้ำ ๆ โปรแกรมมิ่งแบบไดนามิกจะเก็บผลลัพธ์ของปัญหาย่อยเหล่านี้ไว้ในตาราง (หรือเรียกว่าการจำกัดผลลัพธ์) เพื่อหลีกเลี่ยงการคำนวณซ้ำซ้อน

ขั้นตอนในการแก้ปัญหาด้วยโปรแกรมมิ่งแบบไดนามิก
กำหนดโครงสร้างของโซลูชันที่ดีที่สุด: ระบุว่าโซลูชันสำหรับปัญหานั้นสามารถสร้างขึ้นจากปัญหาย่อยอย่างไร

กำหนดโซลูชันเชิงซ้ำ (Recursive Solution): เขียนฟังก์ชันเชิงซ้ำที่แสดงถึงปัญหาในรูปแบบของปัญหาย่อย ซึ่งมักจะเกี่ยวข้องกับการหาความสัมพันธ์เชิงปริพันธ์ (recurrence relation)

ใช้การจำกัดผลลัพธ์หรือการสร้างตาราง (Memoization or Tabulation):

การจำกัดผลลัพธ์ (Memoization): ใช้โครงสร้างข้อมูล (เช่น ดิกชันนารีหรือรายการ) เพื่อเก็บผลลัพธ์ของปัญหาย่อยเมื่อคำนวณแล้ว ดังนั้นเมื่อพบปัญหาย่อยเดียวกันอีกครั้ง คุณสามารถเรียกดูผลลัพธ์ได้แทนที่จะคำนวณใหม่
การสร้างตาราง (Tabulation): สร้างตารางในลักษณะจากล่างขึ้นบน โดยการกรอกผลลัพธ์สำหรับปัญหาย่อยที่เล็กกว่าก่อนแล้วใช้ผลลัพธ์เหล่านั้นในการแก้ปัญหาย่อยที่ใหญ่ขึ้น
สร้างโซลูชัน (Construct the Solution): หากจำเป็น ให้ย้อนกลับผ่านตารางหรือโครงสร้างการจำกัดผลลัพธ์เพื่อสร้างโซลูชันสุดท้าย

ตัวอย่างปัญหาที่ใช้โปรแกรมมิ่งแบบไดนามิกในการแก้ไข
ลำดับฟีโบนัชชิ (Fibonacci Sequence): เลขฟีโบนัชชิที่ n สามารถคำนวณได้อย่างมีประสิทธิภาพโดยใช้โปรแกรมมิ่งแบบไดนามิกโดยการเก็บค่าที่คำนวณไว้ก่อนหน้า
ปัญหาเป้าหมาย (Knapsack Problem): เกี่ยวข้องกับการเลือกชุดของรายการเพื่อเพิ่มมูลค่ารวมโดยไม่เกินน้ำหนักที่กำหนด
ลำดับที่ยาวที่สุดที่ตรงกัน (Longest Common Subsequence): หาปริมาณที่ยาวที่สุดที่ตรงกันระหว่างลำดับสองลำดับ
ระยะห่างในการแก้ไข (Edit Distance): วัดจำนวนการดำเนินการขั้นต่ำที่ต้องใช้ในการแปลงสตริงหนึ่งไปเป็นอีกสตริงหนึ่ง
การคูณแมทริกซ์ (Matrix Chain Multiplication): กำหนดวิธีที่มีประสิทธิภาพที่สุดในการคูณชุดของแมทริกซ์ที่กำหนด
ตัวอย่าง: ลำดับฟีโบนัชชิด้วยโปรแกรมมิ่งแบบไดนามิก
นี่คือตัวอย่างวิธีการคำนวณลำดับฟีโบนัชชิโดยใช้ทั้งการจำกัดผลลัพธ์และการสร้างตาราง:

python
# การจำกัดผลลัพธ์
def FibonacciMemo(n, memo={}):
    if n in memo:
        return memo[n]
    if n <= 1:
        return n
    memo[n] = FibonacciMemo(n - 1, memo) + FibonacciMemo(n - 2, memo)
    return memo[n]

# การสร้างตาราง
def FibonacciTab(n):
    if n <= 1:
        return n
    fib = [0] * (n + 1)
    fib[1] = 1
    for i in range(2, n + 1):
        fib[i] = fib[i - 1] + fib[i - 2]
    return fib[n]

# การใช้งานตัวอย่าง
print(FibonacciMemo(10))  # ผลลัพธ์: 55
print(FibonacciTab(10))    # ผลลัพธ์: 55
ในตัวอย่างนี้ ทั้งวิธีการจำกัดผลลัพธ์และการสร้างตารางจะช่วยลดความซับซ้อนในเวลาอย่างมากเมื่อเปรียบเทียบกับวิธีการเชิงซ้ำธรรมดาซึ่งมีความซับซ้อนในเวลาแบบเอ็กซ์โปเนนเชียล

โปรแกรมมิ่งแบบไดนามิกเป็นแนวคิดพื้นฐานในวิทยาการคอมพิวเตอร์และถูกใช้อย่างกว้างขวางในแอปพลิเคชันต่าง ๆ โดยเฉพาะในปัญหาการเพิ่มประสิทธิภาพ หากคุณมีปัญหาเฉพาะในใจหรือ ต้องการตัวอย่างเพิ่มเติม โปรดแจ้งให้ทราบ!


--------------------------------


1. ปัญหาการเปลี่ยนเหรียญ (Coin Change Problem)
คำอธิบาย: ให้จำนวนเงิน n และชุดของเหรียญแต่ละค่าที่สามารถใช้เพื่อเปลี่ยนเหรียญ คุณต้องหาจำนวนวิธีที่แตกต่างกันในการทำการเปลี่ยนเหรียญให้เป็นจำนวนเงิน n

โค้ดตัวอย่าง:

python
def CoinChange(coins, n):
    # สร้างตารางเพื่อเก็บจำนวนวิธีในการเปลี่ยนเหรียญ
    dp = [0] * (n + 1)
    dp[0] = 1  # มีวิธีเดียวในการสร้าง 0 คือไม่มีเหรียญ

    # สำหรับแต่ละเหรียญ
    for coin in coins:
        for i in range(coin, n + 1):
            dp[i] += dp[i - coin]

    return dp[n]

# การใช้งานตัวอย่าง
coins = [1, 2, 5]
n = 5
print(CoinChange(coins, n))  # ผลลัพธ์: 4 (1+1+1+1+1, 1+1+1+2, 1+2+2, 5)
2. ปัญหาลำดับที่ยาวที่สุดที่ตรงกัน (Longest Common Subsequence)
คำอธิบาย: กำหนดสองลำดับ (string) ให้หา "ลำดับที่ยาวที่สุดที่ตรงกัน" ซึ่งเป็นลำดับที่สามารถสร้างได้จากการลบตัวอักษรจากทั้งสองลำดับ โดยไม่ต้องเปลี่ยนลำดับเดิม

โค้ดตัวอย่าง:

python
def LongestCommonSubsequence(X, Y):
    m = len(X)
    n = len(Y)
    # สร้างตารางสำหรับเก็บผลลัพธ์
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # เติมตาราง
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if X[i - 1] == Y[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    return dp[m][n]

# การใช้งานตัวอย่าง
X = "AGGTAB"
Y = "GXTXAYB"
print(LongestCommonSubsequence(X, Y))  # ผลลัพธ์: 4 ("GTAB")
3. ปัญหาการคูณแมทริกซ์ (Matrix Chain Multiplication)
คำอธิบาย: กำหนดชุดของแมทริกซ์ ให้หาวิธีที่มีประสิทธิภาพที่สุดในการคูณแมทริกซ์ ซึ่งจะลดจำนวนการดำเนินการที่ต้องใช้ให้ต่ำที่สุด

โค้ดตัวอย่าง:

python
def MatrixChainOrder(p):
    n = len(p) - 1
    dp = [[0] * n for _ in range(n)]

    # l คือความยาวของช่วง
    for l in range(2, n + 1):
        for i in range(n - l + 1):
            j = i + l - 1
            dp[i][j] = float('inf')
            for k in range(i, j):
                # คำนวณจำนวนการดำเนินการ
                q = dp[i][k] + dp[k + 1][j] + p[i] * p[k + 1] * p[j + 1]
                if q < dp[i][j]:
                    dp[i][j] = q

    return dp[0][n - 1]

# การใช้งานตัวอย่าง
p = [1, 2, 3, 4]  # ขนาดของแมทริกซ์ 1x2, 2x3, 3x4
print(MatrixChainOrder(p))  # ผลลัพธ์: 18

